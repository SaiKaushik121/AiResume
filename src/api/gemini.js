import { GoogleGenAI } from "@google/genai";

// Generates a fully structured resume, skill gap analysis, learning resources, and interview Q&A using Gemini API, expecting JSON output
export async function genrateWithGemini(data) {
  const ai = new GoogleGenAI({
    apiKey: import.meta.env.VITE_GEMINI_API_KEY,
  });
  const config = {
    thinkingConfig: {
      thinkingBudget: 0,
    },
    responseMimeType: "text/plain",
  };

  // Compose a prompt that requests JSON output with clear formatting, section instructions, and explicit AI source marking
  const prompt = `
You are an expert AI resume assistant.

Given the following user data and (optionally) a job description, generate a response in this exact JSON format:
{
  "resume": {
    "contact": { "name": "...", "email": "...", "phone": "...", "location": "...", "linkedin": "...", "portfolio": "..." },
    "summary": "...", // Only add "source": "ai" if this summary is generated by you (AI/dummy data). Omit "source" if user provided.
    "education": [ { "degree": "...", "university": "...", "dates": "...", "cgpa": "..." } ], // Only add "source": "ai" for AI-generated items.
    "skills": [ { "name": "Skill1" } ], // Only add "source": "ai" for AI-generated skills.
    "experience": [ { "role": "...", "company": "...", "dates": "...", "details": "..." } ], // Only add "source": "ai" for AI-generated experience.
    "certifications": [ { "name": "...", "organization": "...", "date": "..." } ], // Only add "source": "ai" for AI-generated certifications.
    "projects": [ { "name": "...", "technologies": "...", "description": "...", "github": "...", "demo": "..." } ] // Only add "source": "ai" for AI-generated projects.
  },
  "skill_gap_analysis": [
    { "skill": "Skill Name", "suggestion": "How to improve", "source": "ai" }
    // Always mark these as "source": "ai" since they are generated.
  ],
  "learning_resources": [
    {
      "title": "Resource Title",
      "link": "https://...",
      "alternative": "How to find this resource if the link is broken (e.g., search YouTube for 'Traversy Media React Tutorial')",
      "source": "ai"
    }
    // Always provide 3-5 high-quality, diverse resources (courses, videos, docs, etc.) and mark as "source": "ai".
  ],
  "interview_qa": [
    {"question": "A likely interview question based on the job description or user's field.", "answer": "A strong, relevant answer.", "source": "ai"}
    // Always provide at least 5-7 unique, relevant Q&A pairs and mark as "source": "ai".
  ]
}


For each section, use the user's real data where provided. For any section or item that is generated by you (AI/dummy data), add a key "source": "ai" to that item or section. Do NOT add a "source" key for user-provided dataâ€”only for AI-generated (dummy) content. This applies to all arrays (education, skills, experience, certifications, projects, etc.) and all top-level fields. For example, if a skill is user-provided, set {"name": "JavaScript"}, if it is AI-generated, set {"name": "TypeScript", "source": "ai"}.

For resume, use clear keys and arrays for each section. For education, include CGPA or percentage if available. For learning resources, always provide a title, a direct link, a clear alternative way to access it if the link is broken, and set "source": "ai".

IMPORTANT: If ANY section (such as projects, certifications, awards, skills, experience, etc.) is missing or empty in the user data, you MUST generate realistic, role-appropriate examples or dummy data for that section, and set "source": "ai" for those items. The resume should ALWAYS look complete, competitive, and impressive, even if the user did not provide information for every section. If a job description is provided, fill in missing sections with relevant examples or dummy data that would help the user match the job requirements, and mark them as "source": "ai". If no job description is provided, use common examples and in-demand skills for the user's field, and mark them as "source": "ai". Do NOT leave any section empty or missing in the output JSON.

Add in-demand skills for their field. Generate general but strong Q&A and skill gap analysis based on typical requirements for their role, and always mark these as "source": "ai".

For skill_gap_analysis, always provide 3-7 items if possible, based on the user's skills and the job description (or typical requirements for their field), and mark as "source": "ai".
For learning_resources, always provide 3-5 high-quality, diverse resources (courses, videos, docs, etc.), and mark as "source": "ai".
For interview_qa, always provide at least 5-7 unique, relevant Q&A pairs based on the job description and user's background, or common questions for their field if no job description is provided, and mark as "source": "ai".

Respond ONLY with valid JSON. Do not include any text outside the JSON object. Do not use markdown code blocks. All content must be inside the JSON.

User data:
${JSON.stringify(data, null, 2)}
`;

  const model = "gemini-2.5-flash-lite-preview-06-17";
  const contents = [
    {
      role: "user",
      parts: [
        {
          text: prompt,
        },
      ],
    },
  ];

  let result = "";
  const response = await ai.models.generateContentStream({
    model,
    config,
    contents,
  });
  for await (const chunk of response) {
    result += chunk.text;
  }
  // Try to parse JSON, fallback to string if invalid
  try {
    // Remove any leading/trailing whitespace or code block markers
    const cleaned = result
      .trim()
      .replace(/^```json|```$/g, "")
      .trim();
    console.log("Cleaned code is :::"+cleaned);
    return JSON.parse(cleaned);
  } catch (e) {
    return { error: "Invalid JSON from Gemini", raw: result };
  }
}
